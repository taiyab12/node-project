{
  "_from": "swagger-jsdoc@1.3.0",
  "_id": "swagger-jsdoc@1.3.0",
  "_inBundle": false,
  "_integrity": "sha1-AruPwE7L6TaVXW4gxSUutqR908s=",
  "_location": "/swagger-jsdoc",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "swagger-jsdoc",
    "fetchSpec": "1.3.0",
    "name": "swagger-jsdoc",
    "raw": "swagger-jsdoc@1.3.0",
    "rawSpec": "1.3.0",
    "registry": true,
    "saveSpec": null,
    "type": "version"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/swagger-jsdoc/-/swagger-jsdoc-1.3.0.tgz",
  "_shasum": "02bb8fc04ecbe936955d6e20c5252eb6a47dd3cb",
  "_spec": "swagger-jsdoc@1.3.0",
  "_where": "/home/nineleaps/node-pro-github/node-project/Quotes-app/quotes",
  "author": {
    "name": "https://github.com/Surnet/swagger-jsdoc/graphs/contributors"
  },
  "bugs": {
    "url": "https://github.com/Surnet/swagger-jsdoc/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "doctrine": "^1.2.0",
    "glob": "^7.0.3",
    "js-yaml": "^3.5.3",
    "swagger-parser": "^3.4.0"
  },
  "deprecated": false,
  "description": "Generates swagger doc based on JSDoc",
  "devDependencies": {
    "body-parser": "^1.15.0",
    "express": "^4.13.4",
    "istanbul": "^0.4.2",
    "jscs": "^2.10.1",
    "mocha": "^2.4.5",
    "mocha-jscs": "^4.2.0",
    "mocha-jshint": "^2.3.1",
    "supertest": "^1.2.0"
  },
  "homepage": "https://github.com/Surnet/swagger-jsdoc",
  "keywords": [
    "api",
    "express",
    "jsdoc",
    "restful",
    "swagger"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "swagger-jsdoc",
  "optionalDependencies": {},
  "readme": "# swagger-jsdoc\n\n**swagger-jsdoc** enables to integrate [Swagger](http://swagger.io) using JSDoc.\n\n[![npm Version](https://img.shields.io/npm/v/swagger-jsdoc.svg)](https://www.npmjs.com/package/swagger-jsdoc)\n[![npm Downloads](https://img.shields.io/npm/dm/swagger-jsdoc.svg)](https://www.npmjs.com/package/swagger-jsdoc)\n[![Donate](https://img.shields.io/gratipay/Surnet.svg)](https://gratipay.com/Surnet)\n\n[![Circle CI](https://img.shields.io/circleci/project/Surnet/swagger-jsdoc/master.svg)](https://circleci.com/gh/Surnet/swagger-jsdoc)\n[![Codacy Badge](https://img.shields.io/codacy/c5d3d458d11a4fb88b55cd527b1c708f.svg)](https://www.codacy.com/app/Surnet/swagger-jsdoc)\n[![Dependency Status](https://img.shields.io/gemnasium/Surnet/swagger-jsdoc.svg)](https://gemnasium.com/Surnet/swagger-jsdoc)\n[![Documentation Status](http://inch-ci.org/github/Surnet/swagger-jsdoc.svg?branch=master&style=flat)](http://inch-ci.org/github/Surnet/swagger-jsdoc)\n\n## Supported Swagger Versions\n* 2.0\n\n## Install\n\n```bash\n$ npm install swagger-jsdoc --save\n```\n\n### Quick Start\n\nswagger-jsdoc returns the validated swagger specification as JSON.\n\n```javascript\nvar swaggerJSDoc = require('swagger-jsdoc');\n\nvar options = {\n  swaggerDefinition: {\n    info: {\n      title: 'Hello World', // Title (required)\n      version: '1.0.0', // Version (required)\n    },\n  },\n  apis: ['./routes.js'], // Path to the API docs\n};\n\n// Initialize swagger-jsdoc -> returns validated swagger spec in json format\nvar swaggerSpec = swaggerJSDoc(options);\n```\n\nAt this time you can do with the swaggerSpec whatever you want.\nThe simplest way would be serving it straight to the outside world:\n\n```javascript\napp.get('/api-docs.json', function(req, res) {\n  res.setHeader('Content-Type', 'application/json');\n  res.send(swaggerSpec);\n});\n```\n\nYou could also use a framework like [swagger-tools](https://www.npmjs.com/package/swagger-tools) to serve the spec and a swagger-ui.\n\n### How to document the API\n\nThe API can now be documented in JSDoc-style with swagger spec in YAML.\n\n```javascript\n/**\n * @swagger\n * /login:\n *   post:\n *     description: Login to the application\n *     produces:\n *       - application/json\n *     parameters:\n *       - name: username\n *         description: Username to use for login.\n *         in: formData\n *         required: true\n *         type: string\n *       - name: password\n *         description: User's password.\n *         in: formData\n *         required: true\n *         type: string\n *     responses:\n *       200:\n *         description: login\n */\napp.post('/login', function(req, res) {\n  res.json(req.body);\n});\n```\n\n### Re-using Model Definitions\n\nA model may be the same for multiple endpoints (Ex. User POST,PUT responses).\nIn place of writing (or copy and pasting) the same code into multiple locations,\nwhich can be error prone when adding a new field to the schema. You can define \na model and re-use it across multiple endpoints. You can also reference another\nmodel and add fields.\n```javascript\n/**\n * @swagger\n * definition:\n *   NewUser:\n *     type: object\n *     required:\n *       - username\n *       - password\n *     properties:\n *       username:\n *         type: string\n *       password:\n *         type: string\n *         format: password\n *   User:\n *     allOf:\n *       - $ref: '#/definitions/NewUser'\n *       - required:\n *         - id\n *       - properties:\n *         id:\n *           type: integer\n *           format: int64\n */\n\n/**\n   * @swagger\n   * /users:\n   *   get:\n   *     description: Returns users\n   *     produces:\n   *      - application/json\n   *     responses:\n   *       200:\n   *         description: users\n   *         schema:\n   *           type: array\n   *           items: \n   *             $ref: '#/definitions/User'\n   */\n  app.get('/users', function(req, res) {\n    res.json([ {\n      id: 1,\n      username: 'jsmith',\n    }, {1\n      id: 2,\n      username: 'jdoe',\n    } ]);\n  });\n\n  /**\n   * @swagger\n   * /users:\n   *   post:\n   *     description: Returns users\n   *     produces:\n   *       - application/json\n   *     parameters:\n   *       - name: user\n   *         description: User object\n   *         in:  body\n   *         required: true\n   *         type: string\n   *         schema:\n   *           $ref: '#/definitions/NewUser'\n   *     responses:\n   *       200:\n   *         description: users\n   *         schema:\n   *           $ref: '#/definitions/User'\n   */\n  app.post('/users', function(req, res) {\n    // Generate ID\n    req.body.id = Math.floor(Math.random() * 100) * 1\n    res.json(req.body);\n  });\n```\n\n### Load external definitions \n\nYou can load external definitions or paths after ``swaggerJSDoc()`` function.\n```javascript\n// Initialize swagger-jsdoc -> returns validated swagger spec in json format\nvar swaggerSpec = swaggerJSDoc(options);\n// load external schema json\nswaggerSpec.definitions.in_login = require(\"config/schemajson/in.login.schema.json\");\nswaggerSpec.definitions.out_login = require(\"config/schemajson/out.login.schema.json\");\n// or set manual paths\nswaggerSpec.paths[\"api/v1/cool\"] = {\"get\" : { ... } }\n};\n```\n\n\n\n## Example App\n\nThere is an example app in the example subdirectory.\nTo use it you can use the following commands:\n\n```bash\n$ git clone https://github.com/Surnet/swagger-jsdoc.git\n$ cd swagger-jsdoc\n$ npm install\n$ npm start\n```\n\nThe swagger spec will be served at http://localhost:3000/api-docs.json\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Surnet/swagger-jsdoc.git"
  },
  "scripts": {
    "coverage": "istanbul cover _mocha --report html && istanbul check-coverage --statement 95",
    "jsdoc": "jsdoc --configure .jsdocconf",
    "start": "node example/app.js",
    "test": "mocha"
  },
  "version": "1.3.0"
}
